// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

// Authentication (next-auth) tables

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  Authenticator       Authenticator[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// DEX Tool tables

model Pair {
  id                       String           @id @default(cuid())
  chain                    String
  dex                      String
  contractAddress          String
  token0                   Token            @relation("Token0", fields: [token0Id], references: [id])
  token0Id                 String
  token1                   Token            @relation("Token1", fields: [token1Id], references: [id])
  token1Id                 String
  pair                     String
  reserve0                 Float
  reserve1                 Float
  reserveNativeCurrency    Float
  reserveUsd               Float
  volumeUsd                Float
  marketCapUsd             Float
  priceChangePercentage24h Float
  buys24h                  Int
  sells24h                 Int
  buyers24h                Int
  sellers24h               Int
  volumeUsd24h             Float
  txCount                  Int
  status                   Int
  verificationMethod       String
  lastChecked              Int
  duplicatePairs           DuplicatePairs[] @relation("OriginalPair")
  dp2                      DuplicatePairs[] @relation("DuplicatePair")

  @@index([contractAddress(sort: Desc), chain, dex])
  @@index([dex, chain])
  @@index([dex, pair])
  @@index([dex])
  @@index([token0Id])
  @@index([token1Id])
}

model Token {
  id                    String                  @id @default(cuid())
  chain                 String
  contractAddress       String
  symbol                String
  name                  String
  status                Int
  verificationMethod    String
  txCount               Int
  coingeckoCoinId       String
  totalSupply           Float
  volume24hUsd          Float
  marketCapUsd          Float
  decimals              Int
  lastChecked           Int
  pairsToken0           Pair[]                  @relation("Token0")
  pairsToken1           Pair[]                  @relation("Token1")
  duplicateTokenSymbols DuplicateTokenSymbols[] @relation("OriginalToken")
  dt2                   DuplicateTokenSymbols[] @relation("DuplicateToken")

  @@index([contractAddress(sort: Desc), chain])
  @@index([chain])
  @@index([symbol])
  @@index([chain, symbol])
}

model PairStaging {
  id              String @id @default(cuid())
  chain           String
  dex             String
  contractAddress String
  token0Address   String
  token1Address   String

  @@index([dex, chain])
  @@index([dex, chain, contractAddress])
  @@index([dex, chain, contractAddress, token0Address, token1Address])
}

model DuplicateTokenSymbols {
  id               Int    @id @default(autoincrement())
  originalToken    Token  @relation("OriginalToken", fields: [originalTokenId], references: [id])
  originalTokenId  String
  duplicateToken   Token  @relation("DuplicateToken", fields: [duplicateTokenId], references: [id])
  duplicateTokenId String
  chain            String

  @@index([chain])
  @@index([originalTokenId])
  @@index([duplicateTokenId])
}

model DuplicatePairs {
  id              Int    @id @default(autoincrement())
  originalPair    Pair   @relation("OriginalPair", fields: [originalPairId], references: [id])
  originalPairId  String
  duplicatePair   Pair   @relation("DuplicatePair", fields: [duplicatePairId], references: [id])
  duplicatePairId String
  chain           String
  dex             String

  @@index([chain])
  @@index([dex])
  @@index([chain, dex])
  @@index([originalPairId])
  @@index([duplicatePairId])
}
